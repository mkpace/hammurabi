# Namespace:    IRS.Pub519
# Summary:      IRS Publication 519 - Alien Tax Status
# Updated:      2012-10-11
# Author:       Michael Poulshock

# Determines a person's alien tax status: resident alien, nonresident 
# alien, or dual-status alien.  Resident aliens are generally taxed like 
# U.S. citizens.


# ALIEN TAX STATUS
# Use these functions, not the "inferred" ones below, in other rules

Tbool IsResidentAlien(Thing p) =
    Imm.IsAlien(p) &
    AlienTaxStatus(p) == "Resident alien"
    
Tbool IsNonresidentAlien(Thing p) =
    Imm.IsAlien(p) &
    AlienTaxStatus(p) == "Nonresident alien"    

Tbool IsDualStatusAlien(Thing p) =
    Imm.IsAlien(p) &
    AlienTaxStatus(p) == "Dual-status alien"

# Interview stops here before descending...    
# >>What is {1}'s alien tax status? (Options: Resident alien, Nonresident alien, Dual-status alien)
Tstr? AlienTaxStatus(Thing p) =
    set:
    # if IsDualStatusAlienInferred(p) -> "Dual-status alien"
    if IsResidentAlienInferred(p) -> "Resident alien"
    else "Nonresident alien"


# RESIDENT ALIEN, DEFINED

# Is/was {1} a resident alien for tax purposes?
Tbool IsResidentAlienInferred(Thing p) =
    set:
    if IsBonaFideResidentOfPuertoRicoOrAmerSamoa(p) -> Stub()
    else ResidentAlienTest(p)

Tbool ResidentAlienTest(Thing p) =
    MeetsCoreResidentAlienTest(p) |        
    NonresidentSpousalElection(p)

# Factored out to prevent infinite loop when analyzing the nonresident spousal election
Tbool MeetsCoreResidentAlienTest(Thing p) =
    Imm.IsAlien(p) &
    ...
        ...
            ! IRS.Pub901.IsResidentOfForeignCountryUnderTaxTreaty(p) &        # Pub 519, p. 8
            ...
                MeetsGreenCardTest(p) |
                MeetsSubstantialPresenceTest(p) 
        |
        ChoosesResidentAlienStatus(p)  
        
        
# GREEN CARD TEST

# Green card test
# Note: status revocation or abandonment reflected in the temporal fact IsLPR()
Tbool MeetsGreenCardTest(Thing p) = 
    Imm.IsLPR(p).EverPer(TheYear)

    
# SUBSTANTIAL PRESENCE TEST

# Substantial presence
Tbool MeetsSubstantialPresenceTest(Thing p) =
    MeetsBasicSubstantialPresenceTest(p) &
    ! HasCloserConnectionToForeignCountry(p)

Tbool MeetsBasicSubstantialPresenceTest(Thing p) =
    DaysPresentPerYear(p) >= 31 &
    ThreeYearWeightedTotal(p) >= 183

Tnum ThreeYearWeightedTotal(Thing p) =
    daysPresentPerYear +
    (daysPresentPriorYear / 3) +
    (daysPresent2YearsPrior / 6)
        
    Tnum daysPresentPriorYear =
        daysPresentPerYear.Shift(-1,TheYear)
    
    Tnum daysPresent2YearsPrior =
        daysPresentPerYear.Shift(-2,TheYear)
    
    Tnum daysPresentPerYear =    # prevents recomputation
        DaysPresentPerYear(p)   

Tnum DaysPresentPerYear(Thing p) =
    PhysicallyPresent(p).TotalElapsedDaysPer(TheYear)

# Physical presence
Tbool PhysicallyPresent(Thing p) =
    PresentInUS(p) &
    ! PresenceExempt(p) &
    ! ExemptIndividual(p)
    
# Exemptions
Tbool PresenceExempt(Thing p) =
    CommuteToUSRegularlyFromCanadaOrMexico(p) |
    InTransitThroughUS(p) |
    InUSAsCrewOnForeignVessel(p) |
    UnableToLeaveUSDueToMedicalProblem(p)
    
Tbool ExemptIndividual(Thing p) =
    ForeignGovtRelatedBusiness(p) |
    ExemptTeacherOrTrainee(p) |
    ExemptStudent(p) |
    ProfessionalAthleteTempInUSForCharity(p)

# Foreign official    
Tbool ForeignGovtRelatedBusiness(Thing p) =
    visa == "A-1" |
    visa == "A-2" |
    visa == "A-3" |
    visa == "G-1" |
    visa == "G-2" |
    visa == "G-3" |
    visa == "G-4" |
    visa == "G-5"
    
    Tstr visa =
        Imm.NonimmigrantVisaType(p)
    
# Teacher/trainee
Tbool ExemptTeacherOrTrainee(Thing p) =
    onTeacherTraineeVisa &
    ...
        ! twoYearTest |
        threeYearTest
        
    # On J/Q visa for any part of 2 of 6 preceding calendar years
    Tbool twoYearTest =
        yearsInPrior6Years >= 2

    Tbool threeYearTest =
        yearsInPrior6Years <= 3 &
        ForeignEmployerPaidAllIncome(p).AlwaysPer(TheYear) &
        foreignEmpPaidTecherComp.AlwaysPer(TheYear).SlidingElapsedIntervals(TheYear,6) == 6
        
    Tnum yearsInPrior6Years = onTeacherTraineeVisa.EverPer(TheYear).SlidingElapsedIntervals(TheYear,6)
    
    Tbool foreignEmpPaidTecherComp =
        if onTeacherTraineeVisa then ForeignEmployerPaidAllIncome(p)
    
    Tbool onTeacherTraineeVisa =
        visa == "J-1" |
        visa == "J-2" |
        visa == "Q-1" |
        visa == "Q-2" |
        visa == "Q-3" 
    
    Tstr visa =
        Imm.NonimmigrantVisaType(p)

# Students
Tbool ExemptStudent(Thing p) =
    onStudentVisa &
    if fiveYearTest then exceptionTo5Yr
    
    Tbool exceptionTo5Yr =
        ! IntendToResidePermanentlyInUS(p) &
        Imm.CompliedWithTermsOfVisa(p)
    
    # "exempt...for any part of more than five calendar years" (p. 5)
    # Need to use Shift() b/c RunningElapsedInterval counts intervals when they're true?
    Tbool fiveYearTest = onStudentVisa.EverPer(TheYear).RunningElapsedIntervals(TheYear) >= 5
    
    Tbool onStudentVisa =
        visa == "F-1" |
        visa == "F-2" |
        visa == "F-3" |
        visa == "J-1" |
        visa == "J-2" |
        visa == "M-1" |
        visa == "M-2" |
        visa == "M-3" |
        visa == "Q-1" |
        visa == "Q-2" |
        visa == "Q-3"
    
    Tstr visa =
        Imm.NonimmigrantVisaType(p)

# Closer connection (this rule could be more detailed...)
Tbool HasCloserConnectionToForeignCountry(Thing p) =
    DaysPresentPerYear(p) < 183 &
    (closerConnections.Count == 1).EverPer(TheYear) &
    (closerConnections.Count < 2).AlwaysPer(TheYear)
    
    Tset closerConnections = TaxHomeCountries(p).Filter(CloserToForeignCountry(p,_))
    
Tbool CloserToForeignCountry(Thing person, Thing country) =
    CloserConnectionThanWithUS(person, country) &
    country.Id <> "United States"

    
# DUAL-STATUS
# This is when a person is a resident and nonresident in the same year (e.g.
# in their first and last year living in the U.S.)

Tbool ChoosesResidentAlienStatus(Thing p) =
    IsDualStatusAlienInferred(p) &
    Stub() &
    ChoosesToBeTreatedAsResidentAlien(p)
    
Tbool IsDualStatusAlienInferred(Thing p) =
    Stub()

Tdate ResidencyStartingDate(Thing p) =
    Stub()
    
Tdate ResidencyTerminationDate(Thing p) =
    Stub()
    

# NONRESIDENT SPOUSE TREATED AS RESIDENT

# Spouse of citizen/resident elects residency status
Tbool NonresidentSpousalElection(Thing p) =
    Imm.IsAlien(p) &
    Fam.IsMarried(p) &
    ! MeetsCoreResidentAlienTest(p) &
    Fam.SpousesOf(p).Exists(IsCitizenOrRA(_)) &
    ChoosesToBeTreatedAsResidentAlien(p)

# Citizen or resident alien
Tbool IsCitizenOrRA(Thing p) =
    IsUSCitizen(p) |
    MeetsCoreResidentAlienTest(p)

    
# ALIENS FROM AMERICAN SAMOA OR PUERTO RICO

Tbool IsBonaFideResidentOfPuertoRicoOrAmerSamoa(Thing p) =
    Imm.IsAlien(p) &
    ...
        ...
            CountryOfResidence(p) == "Puerto Rico" &
            IsBonaFideResidentOfPuertoRico(p)
        |
        ...
            CountryOfResidence(p) == "American Samoa" &
            IsBonaFideResidentOfAmericanSamoa(p)
    
    
# INPUTS

# >>Is/was {1} a bona fide resident of American Samoa?
Tbool IsBonaFideResidentOfAmericanSamoa(Thing p)

# >>Is/was {1} a bona fide resident of Puerto Rico?
Tbool IsBonaFideResidentOfPuertoRico(Thing p)

# >>Did/does {1} commute regularly to the U.S. from Canada or Mexico?
Tbool CommuteToUSRegularlyFromCanadaOrMexico(Thing p)

# >>Is/was {1} in transit through the U.S. for a period of less than 24 hours?
Tbool InTransitThroughUS(Thing p)

# >>Is/was {1} temporarily present in the U.S. as a crew member on a foreign vessel?
Tbool InUSAsCrewOnForeignVessel(Thing p)

# >>Is/was {1} unable to leave the U.S. due to a medical problem that arose while you were in the U.S.?
Tbool UnableToLeaveUSDueToMedicalProblem(Thing p)

# >>Does/did a foreign employer pay all of {1}'s compensation?
Tbool ForeignEmployerPaidAllIncome(Thing p)

# >>Does/did {1} intend to reside permanently in the U.S.?
Tbool IntendToResidePermanentlyInUS(Thing p)

# >>Is/was {1} a professional athlete temporarily in the U.S. to compete in a charitable sports event?
Tbool ProfessionalAthleteTempInUSForCharity(Thing p)

# >>Does {1} have a 'closer connection' with {2} than with the U.S.?
Tbool CloserConnectionThanWithUS(Thing person, Thing country)    

# >>In what countries does {1} have a tax home? (A tax home is a person's main place of business or employment, regardless of where they live.)
Tset TaxHomeCountries(Thing p)

# >>Does {1} choose to be treated as a resident alien for tax purposes?
Tbool ChoosesToBeTreatedAsResidentAlien(Thing p)


# UNIT TESTS

Test: 655270615
- Things marty, Japan, Russia
- IRS.Pub519.TaxHomeCountries(marty) = [[Japan, Russia]]
- IRS.Pub519.CloserConnectionThanWithUS(marty,Japan) = false
- IRS.Pub519.CloserConnectionThanWithUS(marty,Russia) = true
- CountryLocation(marty) = "Russia"
- IRS.Pub519.HasCloserConnectionToForeignCountry(marty).Out =?= true

Test: 47588400
- Things marty, Japan
- IRS.Pub519.TaxHomeCountries(marty) = [[Japan]]
- IRS.Pub519.CloserConnectionThanWithUS(marty,Japan) = true
- CountryLocation(marty) = "Japan"
- IRS.Pub519.HasCloserConnectionToForeignCountry(marty).Out =?= true

Test: Student1
- Thing jamela
- Imm.NonimmigrantVisaType(jamela) = {Dawn: "None"; 2002-05-02: "J-1"}
- Imm.CompliedWithTermsOfVisa(jamela) = true
- IRS.Pub519.IntendToResidePermanentlyInUS(jamela) = false
- IRS.Pub519.ExemptStudent(jamela).AsOf(2012-12-31).Out =?= true

Test: Student2
- Thing jamela
- Imm.NonimmigrantVisaType(jamela) = {Dawn: "None"; 2011-05-02: "J-1"}
- IRS.Pub519.ExemptStudent(jamela).AsOf(2012-12-31).Out =?= true

Test: Teacher1
- Thing marge
- Imm.NonimmigrantVisaType(marge) = {Dawn: "None"; 2012-05-02: "J-1"}
- IRS.Pub519.ForeignEmployerPaidAllIncome(marge) = false
- IRS.Pub519.ExemptTeacherOrTrainee(marge).AsOf(2012-12-31).Out =?= true
    
Test: Teacher2
- Thing marge
- Imm.NonimmigrantVisaType(marge) = {Dawn: "None"; 2008-01-01: "J-1"}
- IRS.Pub519.ExemptTeacherOrTrainee(marge).AsOf(2012-12-31).Out =?= false

Test: Teacher3
- Thing marge
- Imm.NonimmigrantVisaType(marge) = {Dawn: "None"; 2010-05-01: "J-1"}
- IRS.Pub519.ForeignEmployerPaidAllIncome(marge) = {Dawn: false; 2010-05-01: true}
- IRS.Pub519.ExemptTeacherOrTrainee(marge).AsOf(2012-12-31).Out =?= true
    
Test: Teacher4
- Thing marge
- Imm.NonimmigrantVisaType(marge) = {Dawn: "None"}
- IRS.Pub519.ExemptTeacherOrTrainee(marge).AsOf(2012-12-31).Out =?= false

Test: SubsPresence_Pub519_Page4_Example1
- Thing jed
- IRS.Pub519.PhysicallyPresent(jed) = {Dawn: false; 2009-01-01: true; 2009-04-30: false; 2010-01-01: true; 2010-04-30: false; 2011-01-01: true;  2011-04-30: false}
- IRS.Pub519.MeetsBasicSubstantialPresenceTest(jed).Out =?= false       # Comes to 180 days

Test: SubsPresence2
- Thing jed
- IRS.Pub519.PhysicallyPresent(jed) = {Dawn: false; 2009-01-01: true; 2009-01-21: false; 2010-01-01: true; 2010-02-10: false; 2011-01-01: true;  2011-05-01: false}
- IRS.Pub519.MeetsBasicSubstantialPresenceTest(jed).Out =?= false

Test: SubsPresence3
- Thing jed
- IRS.Pub519.PhysicallyPresent(jed) = {Dawn: false; 2009-01-01: true; 2009-05-01: false; 2010-01-01: true; 2010-05-01: false; 2011-01-01: true; 2011-05-04: false}
- IRS.Pub519.MeetsBasicSubstantialPresenceTest(jed).Out =?= "{Dawn: false; 1/1/2011: true; 1/1/2012: false}"        # 183 days in 2011

Test: ThreeYearWeightedTotal
- Thing jed
- IRS.Pub519.PhysicallyPresent(jed) = {Dawn: false; 2009-01-01: true; 2009-05-01: false; 2010-01-01: true; 2010-05-01: false; 2011-01-01: true; 2011-05-01: false}
- IRS.Pub519.ThreeYearWeightedTotal(jed).Out =?= "{Dawn: 0; 1/1/2009: 120; 1/1/2010: 160; 1/1/2011: 180; 1/1/2012: 60; 1/1/2013: 20; 1/1/2014: 0}"

Test: DaysPresent1
- Thing jed
- IRS.Pub519.PhysicallyPresent(jed) = {Dawn: false; 2009-01-01: true; 2009-01-21: false; 2010-01-01: true; 2010-02-10: false; 2011-01-01: true; 2011-05-30: false}
- IRS.Pub519.DaysPresentPerYear(jed).Out =?= "{Dawn: 0; 1/1/2009: 20; 1/1/2010: 40; 1/1/2011: 149; 1/1/2012: 0}"

Test: 397888975
- Things jim, sherry
- Imm.USImmigrationStatus(jim) = "Alien"
- Fam.MaritalStatus(jim) = "Married"
- IRS.Pub519.MeetsCoreResidentAlienTest(jim) = false
- Fam.SpousesOf(jim) = [[sherry]]
- Imm.USImmigrationStatus(sherry) = "U.S. citizen"
- IRS.Pub519.ChoosesToBeTreatedAsResidentAlien(jim) = true
- IRS.Pub519.NonresidentSpousalElection(jim).Out =?= true

