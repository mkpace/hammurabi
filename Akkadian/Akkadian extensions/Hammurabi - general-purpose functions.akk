# Namespace:    Akkadian.H
# Summary:      General-purpose functions that don't need to be in the Hammurabi core
# Updated:      2013-03-04
# Author:       Michael Poulshock


# DAYS IN CALENDAR QUARTER

Tnum DaysInQuarter() =
    set:
    if TheQuarter == 1 & IsLeapYear() -> 91
    if TheQuarter == 1 -> 90
    if TheQuarter == 2 -> 91
    if TheQuarter == 3 -> 92
    if TheQuarter == 4 -> 92
    else Stub()

Test: DaysInQtr1
- DaysInQuarter().AsOf(2014-02-03).Out =?= 90

Test: DaysInQtr2
- DaysInQuarter().AsOf(2016-02-03).Out =?= 91


# DAYS IN MONTH

Tnum DaysInMonth() =
    set:
    if TheMonth ==  1 -> 31
    if TheMonth ==  2 & IsLeapYear() -> 29
    if TheMonth ==  2 -> 28
    if TheMonth ==  3 -> 31
    if TheMonth ==  4 -> 30
    if TheMonth ==  5 -> 31
    if TheMonth ==  6 -> 30
    if TheMonth ==  7 -> 31
    if TheMonth ==  8 -> 31
    if TheMonth ==  9 -> 30
    if TheMonth == 10 -> 31
    if TheMonth == 11 -> 30
    if TheMonth == 12 -> 31
    else Stub()

Test: DaysInMonth1
- DaysInMonth().AsOf(2014-02-03).Out =?= 28

Test: DaysInMonth2
- DaysInMonth().AsOf(2016-02-03).Out =?= 29

Test: DaysInMonth3
- DaysInMonth().AsOf(2014-12-03).Out =?= 31

Test: DaysInMonth4
- DaysInMonth().AsOf(2014-04-03).Out =?= 30

Test: DaysInMonth5
- DaysInMonth().AsOf(1803-04-03).Out =?= "Stub"


# DAYS IN YEAR

Tnum DaysInYear() =
    set:
    if IsLeapYear() -> 366
    else 365
    
Test: DaysInYear1
- DaysInYear().AsOf(2016-04-05).Out =?= 366

Test: DaysInYear2
- DaysInYear().AsOf(2019-04-05).Out =?= 365


# LEAP YEARS

Tbool IsLeapYear() =
    set:
    if TheYear == 2100  -> false
    if TheYear % 4 == 0 -> true
    else false

Test: LeapYear1
- IsLeapYear().AsOf(2016-04-05).Out =?= true

Test: LeapYear2
- IsLeapYear().AsOf(2019-04-05).Out =?= false


# GET QUARTER (unit tests)

Test: GetQtr1
- (new Tdate(2010,3,2)).Quarter.Out =?= 1

Test: GetQtr2
- (new Tdate(2010,12,2)).Quarter.Out =?= 4

Test: GetQtr3
- (new Tdate(Hstate.Unstated)).Quarter.Out =?= "Unstated"

    
# TEMPORAL MAP FUNCTION

# Given a Tnum function, map it along a timeline, starting at a given date
# and continuing for a given number of intervals.
# The numeric function must return a value for each input integer from 1...n. 
Tnum TemporalMap(Func<Tnum,Tnum> fcn, Tdate startDate, Tnum intervalCount, Time.IntervalType intervalType) = 
    fcn(Time.IntervalsSince(startDate, startDate.AddYears(intervalCount), intervalType))
    

# ADD THING (INSTANTIATE A NEW ONE)

# Creates a new instance of a Thing (if it doesn't already exist)
Thing AddThing(string thingID) =
    Facts.AddThing(thingID)
    
    
# ALL KNOWN PEOPLE

# All known people (in user session)
# Uses lower case to indicate uniqueness of function
Tset people() =
    Facts.AllKnownPeople()

# All known people except a given person
Tset peopleBut(Thing p1) =
    Facts.AllKnownPeople() - p1

# All known people except two given people
Tset peopleBut(Thing p1, Thing p2) =
    Facts.AllKnownPeople() - p1 - p2
    
    
    

