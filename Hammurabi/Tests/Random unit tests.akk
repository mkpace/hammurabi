# Namespace:    Hammurabi.Tests
# Summary:      A host of random unit tests
# Updated:      2013-02-24
# Author:       Michael Poulshock


# NEED TO ASK ASSUMPTIONS WHEN LOOKING FOR NEXT QUESTION

# For example, in the following rule set, IsFatherOf should be asked
# before Legitimated, since the latter assumes the former.  In other
# words, all assumptions should be checked before investigating a fact.

# This check has to happen at the beginning of each method (rule), before
# the rule conditions are evaluated.
#
# Implementation options:
#   1. In RulePreCheck, add any assumed facts to Facts.Unknowns.
#   2. In RulePreCheck, evaluate any assumed facts.

Tbool MeetsTest123(Thing parent, Thing child) =
    Legitimated(parent,child)

# >>Did {1} legitimate {2}?
Tbool Legitimated(Thing a, Thing b)

# >>Is {1} the father of {2}?
Tbool IsFatherOf(Thing a, Thing b)

Legitimated(1,2) assumes IsFatherOf(1,2)
Legitimated(1,2) assumes IsPretendEligible(1)


# DO ASSUMPTION RULES SHORT-CIRCUIT INTERVIEWS?

# It seems like they do.  When the following rule is run in the interview,
# which is pre-seeded with the fact that Peo.Gender(person) = "Male",
# IsPregnant(person) becomes false.

Tbool IsPretendEligible(Thing p) =
    ...
        TestMethod918a(p) |
        Tests.IsPregnant(p)
    & 
    Imm.IsUSNational(p)

Tbool IsPregnant(Thing p)

Tstr Gender(Thing p)

IsPregnant(1) assumes Gender(1) = "Female"


# INTERACTIVE TEST OF LOOK-AHEAD SHORT-CIRCUITING

# To determine whether the technique of (1) caching function results and 
# (2) computing goals while Facts.GetUnknowns = false, will effectively
# implement look-ahead short-circuiting for &&, ||, and |~.

# Currently, look-ahead short-circuiting works when the rule conclusion is
# declared by TvarIn, because this caches the function value in the FactBase.

# TODO: Consider caching the result of all function calls to mitigate the 
# look-ahead short-circuit issue.  (It won't solve it completely because 
# large rules can still fail to short-circuit.)

# Test of & and |
Tbool LookAheadShortCircuit1(Thing A) =
	LookAheadProngB(A) &
	LookAheadProngA(A) &
	LookAheadProngC(A)
	
Tbool LookAheadProngB(Thing A) =		# Tbool -> short-circuits;  Tbool -> doesn't
	LookAheadProngB1(A) |
	LookAheadProngB2(A)

# Test of |~
Tbool LookAheadShortCircuit2(Thing A, Thing B) =
	IsBioParOf(A,B) |
	LookAheadProngA(A)
	
Tbool IsBioParOf(Thing p1, Thing p2) =	# Tbool -> short-circuits;  Tbool -> doesn't
    Fam.Relationship(p1,p2) == "Parent" |~
    Fam.Relationship(p2,p1) == "Child"
    
Tbool LookAheadProngA(Thing A)

Tbool LookAheadProngB1(Thing A)

Tbool LookAheadProngB2(Thing A)

Tbool LookAheadProngC(Thing A)


# INTERVIEW SEQUENCE WITH |~ OPERATOR - NOT WORKING

# Diagnosis: The |~ operator (^ in C#) does not short-circuit like
# && and ||.  Those operators cause AND and OR to ignore irrelevant
# interview branches.  With |~ however, both Tbool inputs to that 
# function are evaluated before the logic within the function is
# applied.

# PARTIAL FIX: Use small rules and TvarIn to mitigate the look-ahead
# short-circuit issue.

# Interview sequence fails - conclusions correct
# Asks 918b when 918a has already been asked (unless rule has been proven)
Tbool Test918a(Thing a) =
    ...
        TestMethod918a(a) |~
        TestMethod918b(a)
    & 
    Imm.IsUSNational(a)

Tbool TestMethod918a(Thing a)

Tbool TestMethod918b(Thing a)


# INTERVIEW SEQUENCE WITH |~ OPERATOR - WORKING
    
Tbool AnotherMethod(Thing p) =
    TestMethod918a(p) |~
    TestMethod918b(p)

# Note: These tests validate the logic, not the interview sequence. But
#       that sequence was tested and is also working properly (2012-08-11).

Test: 171824320
- Thing p
- Tests.TestMethod918a(p) = new Tbool(Hstate.Unstated)
- Tests.TestMethod918b(p) = false
- Tests.AnotherMethod(p).Out =?= false

Test: 580982293
- Thing p
- Tests.TestMethod918a(p) = new Tbool(Hstate.Unstated)
- Tests.TestMethod918b(p) = true
- Tests.AnotherMethod(p).Out =?= true

Test: 288489417
- Thing p
- Tests.TestMethod918a(p) = Tbool(?)
- Tests.TestMethod918b(p) = Tbool(?)
- Tests.AnotherMethod(p).Out =?= "Uncertain"

Test: 798236451
- Thing p
- Tests.TestMethod918a(p) = false
- Tests.AnotherMethod(p).Out =?= false

Test: 416036083
- Thing p
- Tests.TestMethod918a(p) = true
- Tests.AnotherMethod(p).Out =?= true


# TEST OF AKKADIAN COMPILER - METHOD SIGNATURES

# Fail:
Tbool FcnWithNoArgs() =
    true
    
# Pass:
Tbool FcnWithTwoTstrArgs(Tstr s1, Tstr s2) =
    s1 == "a"



# TEST OF DEPRECIATION RULES

# Idea is that the value of some asset depreciates over time.  Given a
# timeline of the depreciation percentage, what is the asset's value?

# Applicable depreciation rate, given the date the property was acquired
Tnum DepreciationRate(Tdate acquisitionDate) =
    Time.TemporalMap(n => DepreciationPercentage(n), acquisitionDate, 10, Time.IntervalType.Year)
    
# Example is from the MARCS depreciation rate for 5-year property
# using the half-year convention.    
Tnum DepreciationPercentage(Tnum year) =
    match year
    1 -> 0.2000
    2 -> 0.3200
    3 -> 0.1920
    4 -> 0.1152
    5 -> 0.1152
    6 -> 0.0576
    else Stub()
 
 
Test: Depreciation1
- Hammurabi.Tests.DepreciationRate(1999-01-01).AsOf(2003-03-03).Out =?= 0.1152

Test: Depreciation2
- Hammurabi.Tests.DepreciationRate(1999-01-01).AsOf(2010-03-03).Out =?= "Stub"

	
# PERIOD END VALUE

Test: PeriodEndVal1
- Thing p
- Fam.IsMarried(p) = {Dawn: false; 2012-05-02: true}
- Fam.IsMarried(p).PeriodEndVal(TheYear).Out =?= "{Dawn: false; 1/1/2012: true}"

Test: PeriodEndVal2
- Thing p
- Fam.IsMarried(p) = true
- Fam.IsMarried(p).PeriodEndVal(TheYear).Out =?= true

Test: PeriodEndVal3
- Thing p
- Peo.IsDeceased(p) = Tbool(?)
- Peo.IsDeceased(p).PeriodEndVal(TheYear).Out =?= "Uncertain"

Test: PeriodEndVal4
- Thing p
- Fam.IsMarried(p) = {Dawn: false; 2012-03-11: true; 2012-05-02: false}
- Fam.IsMarried(p).PeriodEndVal(TheYear).Out =?= false

Test: PeriodEndVal5
- Thing p
- Fam.IsMarried(p) = {Dawn: false; 2012-01-01: true}
- Fam.IsMarried(p).PeriodEndVal(TheYear).Out =?= "{Dawn: false; 1/1/2012: true}"


# USE OF HIGHER-ORDER FUNCTIONS

# Turns out you can use a logical expression (and not just a function)
# as an argument in a higher-order rule such as Filter, Sum, Exists.    
Tnum LogicalExpressionInHigherOrderRule(Thing p) =
    Fam.SpousesOf(p).Filter(Peo.Age(_) < 65).Count

Test: 965821874
- Things jim, a
- Fam.SpousesOf(jim) = [[a]]
- Peo.DoB(a) = 1900-01-01
- Tests.LogicalExpressionInHigherOrderRule(jim).AsOf(2000-01-01).Out =?= 0

Test: 825234342
- Things jim, a
- Fam.SpousesOf(jim) = [[a]]
- Peo.DoB(a) = 1979-01-01
- Tests.LogicalExpressionInHigherOrderRule(jim).AsOf(2000-01-01).Out =?= 1    
    
    
# TVAR.SHIFT

Test: Shift1
- Thing p
- Econ.AnnualIncome(p) = {Dawn: 0; 2000-01-01: 100; 2001-01-01: 200}
- Econ.AnnualIncome(p).Shift(-1,TheYear).Out =?= "{Dawn: 0; 1/1/2001: 100; 1/1/2002: 200}"

Test: Shift2
- Thing p
- Econ.AnnualIncome(p) = {Dawn: 0; 2000-01-01: 100; 2001-01-01: 200}
- Econ.AnnualIncome(p).Shift(0,TheYear).Out =?= "{Dawn: 0; 1/1/2000: 100; 1/1/2001: 200}"

Test: Shift3
- Thing p
- Econ.AnnualIncome(p) = {Dawn: 0; 2000-01-01: 100; 2001-01-01: 200}
- Econ.AnnualIncome(p).Shift(2,TheYear).Out =?= "{Dawn: 0; 1/1/1998: 100; 1/1/1999: 200}"

    
# UNIT TESTS FOR YEARDIFF, WEEKDIFF, DAYDIFF

# YearDiff

Test: YearDiff1
- YearDiff(2001-01-01, 2003-01-01).Out =?= 2 

Test: YearDiff2
- YearDiff(2001-01-01, 2001-01-01).Out =?= 0

Test: YearDiff3
- YearDiff(2000-01-01, 2010-01-01).Out =?= 10 

Test: YearDiff4
- YearDiff(new Tdate(Hstate.Stub), 2010-01-01).Out =?= "Stub"

Test: YearDiff5
- YearDiff(2000-01-02, 2010-01-01).Out =?= 9.997

Test: YearDiff6
- YearDiff(2000-01-01, 2000-01-02).Out =?= 0.003

Test: YearDiff7
- YearDiff(2000-02-29, 2004-02-29).Out =?= 4 

Test: YearDiff8
- YearDiff(2000-02-29, 2004-02-28).Out =?= 4

Test: YearDiff9
- YearDiff(2004-02-29, 2004-02-29).Out =?= 0

# WeekDiff

Test: WeekDiff1
- WeekDiff(2000-01-01, 2000-01-08).Out =?= 1

Test: WeekDiff2
- WeekDiff(2000-01-01, 2000-01-07).Out =?= 0.857

Test: WeekDiff3
- WeekDiff(2000-01-01, 2000-01-15).Out =?= 2
    
# DayDiff
    
Test: DayDiff1
- DayDiff(2001-01-01, 2001-01-02).Out =?= 1

Test: DayDiff2
- DayDiff(2001-01-01, 2001-01-08).Out =?= 7

Test: DayDiff3
- DayDiff(2001-01-01, 2001-01-01).Out =?= 0

Test: DayDiff4
- DayDiff(2000-01-01, 2010-01-01).Out =?= 3653

Test: DayDiff5
- DayDiff(2010-01-01, new Tdate(Hstate.Uncertain)).Out =?= "Uncertain"


# DATE EQUALITY

Tbool DateEquality1(Thing c) =
    Peo.DoB(c) == 2000-01-01
    
Test: DateEquality1a
- Thing b
- Peo.DoB(b) = 2000-01-01
- Tests.DateEquality1(b).Out =?= true

Test: DateEquality1b
- Thing b
- Peo.DoB(b) = 2002-01-01
- Tests.DateEquality1(b).Out =?= false

Tbool DateEquality2(Thing c) =
    Peo.DoB(c) <> 2000-01-01
    
Test: DateEquality2a
- Thing b
- Peo.DoB(b) = 2000-01-01
- Tests.DateEquality2(b).Out =?= false

Test: DateEquality2b
- Thing b
- Peo.DoB(b) = 2000-02-01
- Tests.DateEquality2(b).Out =?= true

Tbool DateEquality3(Thing c) =
    Peo.DoB(c) < 2000-01-01

Test: DateEquality3a
- Thing b
- Peo.DoB(b) = 2000-01-01
- Tests.DateEquality3(b).Out =?= false

Test: DateEquality3b
- Thing b
- Peo.DoB(b) = 2001-01-01
- Tests.DateEquality3(b).Out =?= false

Test: DateEquality3c
- Thing b
- Peo.DoB(b) = 1999-01-01
- Tests.DateEquality3(b).Out =?= true

Tbool DateEquality4(Thing c) =
    Peo.DoB(c) <= 2000-01-01
    
Test: DateEquality4a
- Thing b
- Peo.DoB(b) = 2000-01-01
- Tests.DateEquality4(b).Out =?= true

Test: DateEquality4b
- Thing b
- Peo.DoB(b) = 2001-01-01
- Tests.DateEquality4(b).Out =?= false

Test: DateEquality4c
- Thing b
- Peo.DoB(b) = 1999-01-01
- Tests.DateEquality4(b).Out =?= true

Tbool DateEquality5(Thing c) =
    Peo.DoB(c) > 2000-01-01

Test: DateEquality5a
- Thing b
- Peo.DoB(b) = 2000-01-01
- Tests.DateEquality5(b).Out =?= false

Test: DateEquality5b
- Thing b
- Peo.DoB(b) = 2001-01-01
- Tests.DateEquality5(b).Out =?= true

Test: DateEquality5c
- Thing b
- Peo.DoB(b) = 1999-01-01
- Tests.DateEquality5(b).Out =?= false

Tbool DateEquality6(Thing c) =
    Peo.DoB(c) >= 2000-01-01

Test: DateEquality6a
- Thing b
- Peo.DoB(b) = 2000-01-01
- Tests.DateEquality6(b).Out =?= true

Test: DateEquality6b
- Thing b
- Peo.DoB(b) = 2001-01-01
- Tests.DateEquality6(b).Out =?= true

Test: DateEquality6c
- Thing b
- Peo.DoB(b) = 1999-01-01
- Tests.DateEquality6(b).Out =?= false


# TSET.CONTAINS

Tbool SetContainsThing(Thing p1, Thing p2) =
    Fam.ChildrenOf(p1).Contains(p2)

Test: 85594484
- Things t1, t2
- Fam.ChildrenOf(t1) = [[t2]]
- Tests.SetContainsThing(t1, t2).Out =?= true


# ASK INTERMEDIATE QUESTION BEFORE DESCENDING TREE

Tbool Test9(Thing p) =
    set.Exists(Peo.IsUSCitizen(_))
    
    Tset set =
        SomeRandomPeople(p)

Tset SomeRandomPeople(Thing p)

Tbool MeetsSomeCriteria(Thing p) =
    MeetsCriteria1(p) &
    MeetsCriteria2(p)

Tbool MeetsCriteria2(Thing p) 

Tbool? MeetsCriteria1(Thing p) = 
    TestMethod918a(p) &
    TestMethod918a(p)
    
    
# UNKNOWN THINGS

Tbool SomeMethod(Thing t1, Thing t2) =
    true

Thing StubThing() =
    new Thing(Hstate.Stub)

Thing UnstatedThing() =
    new Thing(Hstate.Unstated)

Thing UncertainThing() =
    new Thing(Hstate.Uncertain)
    
Test: UncertainThing1
- Things p, q
- Tests.SomeMethod(p,q).Out =?= true

Test: UncertainThing2
- Tests.SomeMethod(Tests.UnstatedThing(), Tests.StubThing()).Out =?= "Unstated"

Test: UncertainThing3
- Tests.SomeMethod(Tests.UnstatedThing(), Tests.UncertainThing()).Out =?= "Unstated"

Test: UncertainThing4
- Tests.SomeMethod(Tests.StubThing(), Tests.UncertainThing()).Out =?= "Stub"

Test: UncertainThing5
- Thing p
- Tests.SomeMethod(p, Tests.UncertainThing()).Out =?= "Uncertain"

Test: UncertainThing6
- Thing p
- Tests.SomeMethod(p, Tests.StubThing()).Out =?= "Stub"

Test: UncertainThing7
- Thing p
- Tests.SomeMethod(p, Tests.UnstatedThing()).Out =?= "Unstated"


# INFINITE LOOPS

# Recursive rule that looks for unknown people
Tbool IsCitizen(Thing p) =
    IsCitizenByLaw(p) |
    IsCitizen(TheMotherOf(p))

# >>What's the name of {1}'s mother?
Thing TheMotherOf(Thing p) =
    MotherOf(p).ToThing
 
# >> Is {1} a citizen by law?
Tbool IsCitizenByLaw(Thing p) 
  
# >>What's the name of {1}'s mother?
Tset MotherOf(Thing p)
	
Test: Loop1
- Thing p
- Tests.IsCitizen(p).Out =?= "Unstated"

Test: Loop2
- Things p, mom
- Tests.MotherOf(p) = [[mom]]
- Tests.IsCitizen(p).Out =?= "Unstated"

Test: Loop3
- Things p, mom
- Tests.MotherOf(p) = [[mom]]
- Tests.IsCitizenByLaw(p) = false
- Tests.IsCitizenByLaw(mom) = true
- Tests.IsCitizen(p).Out =?= true

Test: Loop4
- Thing p
- Tests.IsCitizenByLaw(p) = true
- Tests.IsCitizen(p).Out =?= true

Test: Loop5
- Thing p
- Tests.IsCitizenByLaw(p) = false
- Tests.IsCitizen(p).Out =?= "Unstated"

Test: Loop6
- Thing p
- Thing mom
- Tests.MotherOf(p) = [[mom]]
- Tests.IsCitizenByLaw(p) = false
- Tests.IsCitizen(mom) = false
- Tests.IsCitizen(p).Out =?= false

Test: 864022057
- Things t1, t2
- Tests.IsCitizen(t1) = Tbool(?)
- Tests.IsCitizenByLaw(t1) = false
- Things barry
- Tests.MotherOf(t1) = [[barry]]
- Tests.IsCitizen(barry) = Tbool(?)
- Tests.IsCitizenByLaw(barry) = false
- Things monroevius
- Tests.MotherOf(barry) = [[monroevius]]
- Tests.IsCitizen(monroevius) = Tbool(?)
- Tests.IsCitizenByLaw(monroevius) = true
- Tests.IsCitizen(t1).Out =?= true


# TSET INPUTS

Tnum TestTsetCount(Thing p) =
    TestTset(p).Count

# >>What items are in {1}'s set?
Tset TestTset(Thing p)


Test: Tset1
- Thing p
- Thing joan
- Tests.TestTset(p) = [[joan]]
- Tests.TestTsetCount(p).Out =?= 1

Test: Tset2
- Thing p
- Thing jim
- Thing joan
- Tests.TestTset(p) = [[jim, joan]]
- Tests.TestTsetCount(p).Out =?= 2

Test: Tset3
- Thing p
- Tests.TestTset(p) = [[ ]]
- Tests.TestTsetCount(p).Out =?= 0

Test: Tset4
- Thing p
- Tests.TestTsetCount(p).Out =?= "Unstated"

Test: Tset5  # fail b/c doesn't output Tset data
- Thing p
- Thing jim
- Thing joan
- Tests.TestTset(p) = [[jim, joan]]
- Tests.TestTset(p).Out =?= "jim, joan"


# METHODS WITH THREE PARAMETERS

Tbool Another3ParamTest(Thing a, Thing b, Thing c) =
    IsXYZ(a,b,c)

Tbool IsABC(Thing a, Thing b, Thing c) =
    Stub() |
    IsXYZ(a,b,c)

Tbool IsXYZ(Thing x, Thing y, Thing z)

Test: Param3_1a
- Things x, y, z
- Tests.IsXYZ(x,y,z) = true
- Tests.IsXYZ(x,y,z).Out =?= true

Test: Param3_1b
- Things x, y, z
- Tests.IsXYZ(x,y,z) = false
- Tests.IsXYZ(x,y,z).Out =?= false

Test: Param3_1c
- Things x, y, z
- Tests.IsXYZ(x,y,z).Out =?= "Unstated"

Test: Param3_2a
- Things a, b, c
- Tests.IsXYZ(a,b,c) = true
- Tests.Another3ParamTest(a,b,c).Out =?= true

Test: Param3_2b
- Things a, b, c
- Tests.IsXYZ(a,b,c) = false
- Tests.Another3ParamTest(a,b,c).Out =?= false

Test: Param3_2c
- Things a, b, c
- Tests.Another3ParamTest(a,b,c).Out =?= "Unstated"


# TIME-VARYING BOOLEANS
    
# Time-varying boolean subrule
Tbool SomeTemporalBooleanSubrule() =
    rule
    
    Tbool rule =
        set:
        from 2001-01-01 -> false
        from 2000-01-01 -> true
        else false
    
Test: TimeVaryingBooleanSub1
- Tests.SomeTemporalBooleanSubrule().AsOf(1999-03-09).Out =?= false

Test: TimeVaryingBooleanSub2
- Tests.SomeTemporalBooleanSubrule().AsOf(2000-03-09).Out =?= true

Test: TimeVaryingBooleanSub3
- Tests.SomeTemporalBooleanSubrule().AsOf(2002-03-09).Out =?= false        
    
    
# Time-varying boolean
Tbool SomeTemporalBoolean() =
    set:
    from 2001-01-01 -> false
    from 2000-01-01 -> true
    else false
        
Test: TimeVaryingBoolean1
- Tests.SomeTemporalBoolean().AsOf(1999-03-09).Out =?= false

Test: TimeVaryingBoolean2
- Tests.SomeTemporalBoolean().AsOf(2000-03-09).Out =?= true

Test: TimeVaryingBoolean3
- Tests.SomeTemporalBoolean().AsOf(2002-03-09).Out =?= false        


# Yet another time-varying boolean
Tnum FedMinWageTest() =
    set:
    from 2009-07-24 -> $7.25
    from 2008-07-24 -> $6.55
    from 2007-07-24 -> SomeTestNumber()
    else Stub()

Test: TemporalTnumTest1
- Tests.FedMinWageTest().AsOf(2008-12-12).Out =?= $6.55
   
Test: TemporalTnumTest2
- Tests.FedMinWageTest().AsOf(2001-12-12).Out =?= "Stub"
    
Tnum SomeTestNumber() =
    5
    
    